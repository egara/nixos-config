# Key bindings

# Set programs that I use
$lock = hyprlock
$terminal = kitty
$fileManager = thunar
#$menu = wofi --show drun
$menu = walker
$browser = firefox
$webapp = google-chrome-stable --app

# See https://wiki.hyprland.org/Configuring/Keywords/ for more
$mainMod = SUPER

# Simple binds, see https://wiki.hyprland.org/Configuring/Binds/ for more
# For finding a special KEY, install wev application
bindd = CONTROLALT, T, Terminal (Kitty), exec, uwsm app -- $terminal
bindd = $mainMod, Y, File Manager (Yazi), exec, uwsm app -- $terminal yazi
bindd = $mainMod, T, Text Editor (Sublime Text), exec, uwsm app -- subl
bindd = $mainMod, Q, Close Window, killactive, 
bindd = CONTROLALT, Delete, Exit, exit,
bindd = $mainMod, E, File Manager (Thunar), exec, uwsm app -- $fileManager
bindd = $mainMod, F, Toggle Floating Window, togglefloating, 
bindd = $mainMod, KP_Multiply, Reduce/Enlarge Current Window, pseudo, # dwindle
bindd = $mainMod, KP_DIVIDE, Change Layout, togglesplit, # dwindle
bindd = $mainMod, W, Firefox, exec, uwsm app -- $browser
bindd = $mainMod, P, Firefox (Private Window), exec, uwsm app -- $browser --private-window
bindd = $mainMod, G, Gemini, exec, uwsm app -- $webapp="https://gemini.google.com/"
bindd = $mainMod, S, NixOS maintenance and other scripts, exec, ~/.config/hypr/nixos-scripts.sh
bindd = $mainMod, C, Lazyssh, exec, uwsm app -- $terminal --override term=xterm-256color -e lazyssh
bindd = SUPER, SUPER_L, App Launcher (Walker), exec, uwsm app -- $menu # App launcher
#bind = SUPER, SUPER_L, App Launcher (Wofi), exec, pgrep -x .wofi-wrapped >/dev/null 2>&1 && killall .wofi-wrapped || $menu # App launcher if wofi is not running. If it is running, kill it in order to avoid multiple instances
bindd = $mainMod CONTROL, up, Maximize Window (Toggling), fullscreen, 1
#bindd = $mainMod, KP_Subtract, Notifications History, exec, dunstctl history-pop # Notifications history
bindd = $mainMod ALT, right, Resize Current Window (Right), resizeactive, 20 0
bindd = $mainMod ALT, left, Resize Current Window (Left), resizeactive, -20 0
bindd = $mainMod ALT, up, Resize Current Window (Up), resizeactive, 0 -20
bindd = $mainMod ALT, down, Resize Current Window (Down), resizeactive, 0 20
bindd = ALT, tab, Next Window (Cycle), cyclenext
## Windows switcher using hyprswitch (https://github.com/H3rmt/hyprswitch)
#bindd = ALT, tab, exec, hyprswitch
#bindd = ALT SHIFT, tab, exec, hyprswitch -r

# Volume
# pamixer is needed to get the volume via command line
# Old configurations with dunst
#bind =, xf86audioraisevolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+ && dunstify -a "-- Changing volume --" -u low -r 9993 -h int:value:$(pamixer --get-volume) "Volume: $(pamixer --get-volume)%"
#bind =, xf86audiolowervolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%- && dunstify -a "-- Changing volume --" -u low -r 9993 -h int:value:$(pamixer --get-volume) "Volume: $(pamixer --get-volume)%"
#bind =, XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle && if [ "$(pamixer --get-mute)" == "true" ]; then dunstify -a "-- Changing volume --" -u low -r 9993 "Volume Muted"; else dunstify -a "-- Changing volume --" -u low -r 9993 "Volume Unmuted"; fi

# New configuration with swaync
bind =, xf86audioraisevolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+ && notify-send -u low -t 5000 -h string:synchronous:volume -h int:value:$(pamixer --get-volume) -h string:x-canonical-private-synchronous:script "Volume"

#notify-send -u low -r 9993 -h int:value:$(pamixer --get-volume) "Changing volume" "Volume: $(pamixer --get-volume)%"
bind =, xf86audiolowervolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%- && notify-send -u low -t 5000 -h string:synchronous:volume -h int:value:$(pamixer --get-volume) -h string:x-canonical-private-synchronous:script "Volume"
bind =, XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle && if [ "$(pamixer --get-mute)" == "true" ]; then notify-send -u low -r 9993 "Volume" "Volume Muted"; else notify-send -u low -r 9993 "Volume" "Volume unmuted"; fi

# Screen brighness
# brightnessctl is needed to change the screen brighness via command line
# Old configurations with dunst
#bind =, XF86MonBrightnessUp, exec, brightnessctl s +5% && dunstify -a "-- Changing brightness --" -u low -r 9993 -h int:value:$(brightnessctl g) "Brightness: $(brightnessctl g)%"
#bind =, XF86MonBrightnessDown, exec, brightnessctl s 5%- && dunstify -a "-- Changing brightness --" -u low -r 9993 -h int:value:$(brightnessctl g) "Brightness: $(brightnessctl g)%"

# New configuration with swaync
bind =, XF86MonBrightnessUp, exec, brightnessctl s +5% && notify-send -u low -t 5000 -h string:synchronous:brightness -h int:value:$(($(brightnessctl g)*100/$(brightnessctl m))) -h string:x-canonical-private-synchronous:script "Brightness"
bind =, XF86MonBrightnessDown, exec, brightnessctl s 5%- && notify-send -u low -t 5000 -h string:synchronous:brightness -h int:value:$(($(brightnessctl g)*100/$(brightnessctl m))) -h string:x-canonical-private-synchronous:script "Brightness"


# Change the wallpaper randomly
bindd = $mainMod, 1, Change Wallpaper (Random), exec, swww img /home/egarcia/Insync/eloy.garcia.pca@gmail.com/Google\ Drive/Wallpapers/$(ls /home/egarcia/Insync/eloy.garcia.pca@gmail.com/Google\ Drive/Wallpapers | shuf -n 1)

# Screenshots
bindd =, Print, Take a screenshot, exec, notify-send -t 2500 -u low -r 9993 "Screenshot" "Select the region you want" && grim -g "$(slurp)" - | swappy -f -

# Lock screen manually
bindd = CONTROLALT, L, Lock Screen, exec, $lock

# Clipboard
#bind = $mainMod, V, exec, cliphist list | wofi --dmenu | cliphist decode | wl-copy

# Submaps binds
# Moving windows
bind = $mainMod, RETURN, submap, moveWindow # will switch to a submap called moveWindow
submap = moveWindow # will start a submap called "resize"
binde = , right, movewindow, r
binde = , left, movewindow, l
binde = , up, movewindow, u
binde = , down, movewindow, d
bind = , escape, submap, reset # use reset to go back to the global submap
submap = reset # will reset the submap, meaning end the current one and return to the global one.

# Move focus with mainMod + arrow keys
bindd = $mainMod, left, Move Focus (Left), movefocus, l
bindd = $mainMod, right, Move Focus (Right), movefocus, r
bindd = $mainMod, up, Move Focus (Up), movefocus, u
bindd = $mainMod, down, Move Focus (Down), movefocus, d

# Switch workspaces
# Current solution using hyprnome
bindd = CONTROLALT, left, Switch Workspace (Left), exec, hyprnome --previous
bindd = CONTROLALT, right, Switch Workspace (Right), exec, hyprnome
# Old solution without hyprnome
#bind = CONTROLALT, left, workspace, 1
#bind = CONTROLALT, right, workspace, 2
#bind = CONTROLALT, up, workspace, 3
#bind = CONTROLALT, down, workspace, 4
# [ORIGINAL] Switch workspaces
#bind = $mainMod, 5, workspace, 5
#bind = $mainMod, 6, workspace, 6
#bind = $mainMod, 7, workspace, 7
#bind = $mainMod, 8, workspace, 8
#bind = $mainMod, 9, workspace, 9
#bind = $mainMod, 0, workspace, 10

# Move active window to a workspace
# Current solution using hyprnome
bindd = CONTROLALT SHIFT, left, Move Active Window To Workspace (Left), exec, hyprnome --previous --move
bindd = CONTROLALT SHIFT, right, Move Active Window To Workspace (Right), exec, hyprnome --move
#bind = CONTROLALT SHIFT, left, movetoworkspace, +1
#bind = CONTROLALT SHIFT, right, movetoworkspace, -1
# Old solution without hyprnome
#bind = CONTROLALT SHIFT, left, movetoworkspace, 1
#bind = CONTROLALT SHIFT, right, movetoworkspace, 2
#bind = CONTROLALT SHIFT, up, movetoworkspace, 3
#bind = CONTROLALT SHIFT, down, movetoworkspace, 4
# [ORIGINAL] Move active window to a workspace with mainMod + SHIFT + [0-9]
#bind = $mainMod SHIFT, 5, movetoworkspace, 5
#bind = $mainMod SHIFT, 6, movetoworkspace, 6
#bind = $mainMod SHIFT, 7, movetoworkspace, 7
#bind = $mainMod SHIFT, 8, movetoworkspace, 8
#bind = $mainMod SHIFT, 9, movetoworkspace, 9
#bind = $mainMod SHIFT, 0, movetoworkspace, 10

# Special workspace (scratchpad)
bindd = $mainMod, M, Magic Workspace (Toggling), togglespecialworkspace, magic
bindd = CONTROLALT SHIFT, M, Move Active Window To Workspace (Magic), movetoworkspace, special:magic

# Scroll through existing workspaces with mainMod + scroll
bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow
